{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_roundSessionExpiryInSeconds",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "_maxPlayers",
						"type": "uint8"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "player",
						"type": "address"
					}
				],
				"name": "Bust",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "player",
						"type": "address"
					}
				],
				"name": "Hit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "player",
						"type": "address"
					}
				],
				"name": "Stand",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "player",
						"type": "address"
					}
				],
				"name": "Win",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "deal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "dealer",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getHand",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "hit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxPlayers",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "phase",
				"outputs": [
					{
						"internalType": "enum BlockJack.Phase",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "placeBet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stand",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Blackjack as a smart contract. A round of blockjack runs in the following order:  1. The owner of the contract (deployer) is the dealer. He determines the maximum amount of players.  2. Players register to the game by running `placeBet()`. (currently free ;) ..)  3. Dealer deals cards with `deal()`. Everyone can check their hand with `getHand()`  4. Players either request an additional card with `hit()` or abstain with `stand()`  5. Dealer deals additional cards to any players whi requested.  6. Repeat 3. - 5. until no new requests.",
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"_maxPlayers": "The maximum number of players.",
						"_roundSessionExpiryInSeconds": "The maximum duration of a round in seconds."
					}
				},
				"deal()": {
					"details": "Deal cards to all players that want to. (`hit()`)"
				},
				"getHand()": {
					"details": "Returns the hand of the calling player.",
					"returns": {
						"_0": "An array of uint256 representing the player's hand."
					}
				},
				"hit()": {
					"details": "updates players status to hit. Allows him to request an additional card."
				},
				"placeBet()": {
					"details": "Allows a player to join the game by placing a bet."
				},
				"stand()": {
					"details": "updates players status to stand. Player chooses not to receive any additional cards."
				}
			},
			"title": "BlockJack",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"blockjack.sol": "BlockJack"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
				"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"blockjack.sol": {
			"keccak256": "0x077f69e85f206ba0b9bc584e605b85d94c5e33298fbdf26239e46f4127bd3992",
			"license": "MIT",
			"urls": [
				"bzz-raw://108ab8df432e4ca3c2a17d1352dff090478bb65581f2d72f354e5ea5d9bf9b54",
				"dweb:/ipfs/QmVPcZAm848pdX5hkUdQP8ZhyApS35bCQNxtHG7HgXYMyB"
			]
		}
	},
	"version": 1
}